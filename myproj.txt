git path :
https://github.com/tomernos/python-projects

in my local computer:

=== my-project/my_flask.py ===

from flask import Flask, render_template, request, redirect, url_for, session, flash
from database import (
    SessionLocal, User, ChatMessage, create_table, create_chat_table,
    insert_user, review_users, delete_user, modify_user, count_users,
    find_user_by_id, verify_user, insert_chat_message, get_all_chat_messages
)
import os
from dotenv import load_dotenv


load_dotenv()


app = Flask(__name__)
#app.secret_key = os.environ.get('SECRET_KEY', os.urandom(24))

# Database configuration
app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# Initialize the database
create_table()
create_chat_table()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        if verify_user(username, password):
            session['username'] = username
            return redirect(url_for('index'))
        else:
            flash('Invalid username or password')
    return render_template('login.html')

@app.route('/logout')
def logout():
    session.pop('username', None)
    return redirect(url_for('index'))




@app.route('/insert', methods=['GET', 'POST'])
def insert():
    if request.method == 'POST':
        id = request.form['id']
        username = request.form['username']
        password = request.form['password']
        classification = request.form['classification']
        age = request.form['age']
        email = request.form['email']
        insert_user(id, username, password, classification, age, email)
        return redirect(url_for('index'))
    return render_template('insert.html')

@app.route('/review')
def review():
    users = review_users()
    total_users = count_users()
    return render_template('review.html', users=users, total_users=total_users)

@app.route('/delete', methods=['GET', 'POST'])
def delete():
    if request.method == 'POST':
        user_id = request.form['user_id']
        delete_user(user_id)
        return redirect(url_for('index'))
    return render_template('delete.html')

@app.route('/modify', methods=['GET', 'POST'])
def modify():
    if request.method == 'POST':
        user_id = request.form['user_id']
        username = request.form['username'] or None
        password = request.form['password'] or None
        classification = request.form['classification'] or None
        age = request.form['age'] or None
        email = request.form['email'] or None
        modify_user(user_id, username, password, classification, age, email)
        return redirect(url_for('index'))
    return render_template('modify.html')

@app.route('/count')
def count():
    total_users = count_users()
    return render_template('count.html', total_users=total_users)

@app.route('/find', methods=['GET', 'POST'])
def find():
    if request.method == 'POST':
        user_id = request.form['user_id']
        user = find_user_by_id(user_id)
        return render_template('find.html', user=user)
    return render_template('find.html')

@app.route('/chat', methods=['GET', 'POST'])
def chat():
    if 'username' not in session:
        return redirect(url_for('login'))

    if request.method == 'POST':
        message = request.form['message']
        insert_chat_message(session['username'], message)
        return redirect(url_for('chat'))

    messages = get_all_chat_messages()
    return render_template('chat.html', messages=messages)


if __name__ == '__main__':
    print(os.getcwd())
    print(app.template_folder)
    app.run(host='0.0.0.0', port=5000)




=== my-project/requirements.txt ===

Flask==2.0.1
Werkzeug==2.0.1
click==8.0.1
itsdangerous==2.0.1
Jinja2==3.0.1
MarkupSafe==2.0.1
pytest==6.2.4
blinker==1.4
exceptiongroup==1.0.0rc9
iniconfig==1.1.1
packaging==21.0
pluggy==0.13.1
tomli==1.2.1
psycopg2-binary==2.9.3
sqlalchemy==2.0.32
python-dotenv==1.0.1



=== my-project/database.py ===

import os
from sqlalchemy import create_engine, Column, Integer, String, DateTime
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from datetime import datetime
from dotenv import load_dotenv


load_dotenv()
# Get database connection details from environment variables
DB_USER = os.environ.get('DB_USER')
DB_PASSWORD = os.environ.get('DB_PASSWORD')
DB_HOST = os.environ.get('DB_HOST')
DB_NAME = os.environ.get('DB_NAME')
DB_PORT = os.environ.get('DB_PORT')

# Create the database URL
DATABASE_URL = f"postgresql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}"

# Create the SQLAlchemy engine
engine = create_engine(DATABASE_URL)

# Create a session factory
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Create a base class for declarative models
Base = declarative_base()

# Define your models
class User(Base):
    __tablename__ = "users"

    key = Column(Integer, primary_key=True, index=True)
    id = Column(Integer)
    username = Column(String(55))
    password = Column(String)
    classification = Column(String(1))
    age = Column(Integer)
    email = Column(String(55))

class ChatMessage(Base):
    __tablename__ = "chat_messages"

    key = Column(Integer, primary_key=True, index=True)
    username = Column(String)
    message = Column(String)
    timestamp = Column(DateTime, default=datetime.utcnow)

# Database operations
def create_table():
    Base.metadata.create_all(bind=engine)

def create_chat_table():
    Base.metadata.create_all(bind=engine)

def insert_user(id, username, password, classification, age, email):
    db = SessionLocal()
    new_user = User(id=id, username=username, password=password, classification=classification, age=age, email=email)
    db.add(new_user)
    db.commit()
    db.close()

def review_users():
    db = SessionLocal()
    users = db.query(User).all()
    db.close()
    return users

def delete_user(user_id):
    db = SessionLocal()
    user = db.query(User).filter(User.id == user_id).first()
    if user:
        db.delete(user)
        db.commit()
    db.close()

def modify_user(user_id, username=None, password=None, classification=None, age=None, email=None):
    db = SessionLocal()
    user = db.query(User).filter(User.id == user_id).first()
    if user:
        if username:
            user.username = username
        if password:
            user.password = password
        if classification:
            user.classification = classification
        if age:
            user.age = age
        if email:
            user.email = email
        db.commit()
    db.close()

def count_users():
    db = SessionLocal()
    count = db.query(User).count()
    db.close()
    return count

def find_user_by_id(user_id):
    db = SessionLocal()
    user = db.query(User).filter(User.id == user_id).first()
    db.close()
    return user

def verify_user(username, password):
    db = SessionLocal()
    user = db.query(User).filter(User.username == username, User.password == password).first()
    db.close()
    return user is not None

def insert_chat_message(username, message):
    db = SessionLocal()
    new_message = ChatMessage(username=username, message=message)
    db.add(new_message)
    db.commit()
    db.close()

def get_all_chat_messages():
    db = SessionLocal()
    messages = db.query(ChatMessage).order_by(ChatMessage.timestamp.asc()).all()
    db.close()
    return messages

=== my-project/templates/chat.html ===

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat</title>
</head>
<body>
    <h1>Chat Box</h1>
    <form action="/chat" method="POST">
        <textarea name="message" rows="4" cols="50" required></textarea><br>
        <button type="submit">Send</button>
    </form>
    <h2>Messages:</h2>
    <div>
        {% for message in messages %}
            <p><strong>{{ message[0] }}:</strong> {{ message[1] }} <em>({{ message[2] }})</em></p>
        {% endfor %}
    </div>
    <a href="{{ url_for('logout') }}">Logout</a>
</body>
</html>


=== my-project/templates/count.html ===

<!DOCTYPE html>
<html>
<head>
    <title>Count Users</title>
</head>
<body>
    <h1>Total Users: {{ total_users }}</h1>
    <a href="/">Back to Menu</a>
</body>
</html>

=== my-project/templates/delete.html ===

<!DOCTYPE html>
<html>
<head>
    <title>Delete User</title>
</head>
<body>
    <h1>Delete User</h1>
    <form method="POST" action="/delete">
        <input type="text" name="user_id" placeholder="User ID" required><br>
        <button type="submit">Delete</button>
    </form>
    <a href="/">Back to Menu</a>
</body>
</html>

=== my-project/templates/find.html ===

<!doctype html>
<html>
<head>
    <title>Find User</title>
</head>
<body>
    <h1>Find User by ID</h1>
    <form method="post" action="/find">
        <label for="user_id">User ID:</label><br>
        <input type="text" id="user_id" name="user_id"><br><br>
        <input type="submit" value="Find">
    </form>
    
    {% if user %}
        <h2>User Details</h2>
        <ul>
            <li>ID: {{ user[1] }}</li>
            <li>Username: {{ user[2] }}</li>
            <li>Password: {{ user[3] }}</li>
            <li>Classification: {{ user[4] }}</li>
            <li>Age: {{ user[5] }}</li>
            <li>Email: {{ user[6] }}</li>
        </ul>
    {% endif %}
    <a href="/">Back to Menu</a>
</body>
</html>

=== my-project/templates/index.html ===

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home</title>
</head>
<body>
    <h1>Welcome to the Flask App</h1>
    {% if 'username' in session %}
        <p>Hello, {{ session['username'] }} !</p>
        <nav>
            <ul>
                <li><a href="{{ url_for('index') }}">Home</a></li>
                <li><a href="{{ url_for('review') }}">Review Users</a></li>
                <li><a href="{{ url_for('modify') }}">Modify User</a></li>
                <li><a href="{{ url_for('delete') }}">Delete User</a></li>
                <li><a href="{{ url_for('count') }}">Count Users</a></li>
                <li><a href="{{ url_for('find') }}">Find User by ID</a></li>
                <li><a href="{{ url_for('chat') }}">Chat</a></li>
            </ul>
        </nav>
        <a href="{{ url_for('logout') }}">Logout</a>
    {% else %}
        <p>Hello, Guest!</p>
            <li><a href="{{ url_for('login') }}">Login</a></li>
            <li><a href="{{ url_for('insert') }}">Sign Up</a></li>
    {% endif %}
</body>
</html>

=== my-project/templates/insert.html ===

<!-- templates/insert.html -->
<!DOCTYPE html>
<html>
<head>
    <title>Insert User</title>
</head>
<body>
    <h1>Insert User</h1>
    <form method="POST" action="/insert">
        <input type="text" name="id" placeholder="ID" required><br>
        <input type="text" name="username" placeholder="Username" required><br>
        <input type="password" name="password" placeholder="Password" required><br>
        <input type="text" name="classification" placeholder="Classification" required><br>
        <input type="number" name="age" placeholder="Age" required><br>
        <input type="email" name="email" placeholder="Email" required><br>
        <button type="submit">Insert</button>
    </form>
    <a href="/">Back to Menu</a>
</body>
</html>

=== my-project/templates/login.html ===

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
</head>
<body>
    <h1>Login</h1>
    <form action="/login" method="POST">
        <label for="username">Username:</label><br>
        <input type="text" id="username" name="username" required><br>
        <label for="password">Password:</label><br>
        <input type="password" id="password" name="password" required><br><br>
        <button type="submit">Login</button>
    </form>
    {% with messages = get_flashed_messages() %}
        {% if messages %}
            <ul>
                {% for message in messages %}
                    <li>{{ message }}</li>
                {% endfor %}
            </ul>
        {% endif %}
    {% endwith %}
</body>
</html>

=== my-project/templates/modify.html ===

<!DOCTYPE html>
<html>
<head>
    <title>Modify User</title>
</head>
<body>
    <h1>Modify User</h1>
    <form method="POST" action="/modify">
        <input type="text" name="user_id" placeholder="User ID" required><br>
        <input type="text" name="username" placeholder="New Username"><br>
        <input type="password" name="password" placeholder="New Password"><br>
        <input type="text" name="classification" placeholder="New Classification"><br>
        <input type="number" name="age" placeholder="New Age"><br>
        <input type="email" name="email" placeholder="New Email"><br>
        <button type="submit">Modify</button>
    </form>
    <a href="/">Back to Menu</a>
</body>
</html>

=== my-project/templates/review.html ===


<!DOCTYPE html>
<html>
<head>
    <title>Review Users</title>
</head>
<body>
    <h1>Total Users: {{ total_users }}</h1>
    <h1>Review Users : </h1>
    <ul>
    {% for user in users %}
        <li>ID: {{ user[1] }}, Username: {{ user[2] }}, Age: {{ user[5] }}, Email: {{ user[6] }}</li>
    {% endfor %}
    </ul>
    <a href="/">Back to Menu</a>
</body>
</html>


=== my-project/Jenkinsfile ===


pipeline {
    agent any

    environment {
        GIT_CREDENTIALS = '12341234' 
    }

    stages {

        stage('Setup') {
            steps {
                script {
                    sh '''
                    if ! sudo command -v docker &> /dev/null
                    then
                        sudo curl -fsSL https://get.docker.com/ | sh
                    fi
                    '''
      
        
                    sh '''
                    if ! sudo command -v docker-compose &> /dev/null
                    then
                        sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                        sudo chmod +x /usr/local/bin/docker-compose
                    fi
                    ''' 
            
                    sh '''
                    if ! sudo command -v python3 &> /dev/null
                    then
                        sudo apt-get update
                        sudo apt-get install -y python3 python3-pip
                    fi
                    '''
                    sh '''
                    if ! sudo command -v git &> /dev/null
                    then
                        sudo apt-get update
                        sudo apt-get install -y git
                    fi
                    '''

                }
            }
        }
        stage('Checkout') {
            steps {
                script {
                    git branch: 'main', credentialsId: env.GIT_CREDENTIALS, url: 'https://github.com/tomernos/python-projects.git'
                
                }
            }
        }
        stage('Build') {
            steps {
                script {
                    sh 'sudo docker-compose build'
                }
            }
        }

        stage('Check Environment') {
            steps {
                sh '''
                   echo "User: $(whoami)"
                   echo "Python Version:"
                   python3 --version
                   echo "Python Path:"
                   which python3
                   echo "Pip List:"
                   pip list
                   echo "Environment Variables:"
                   env
                '''
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    sh '''
                    # Create and activate virtual environment
                    python3 -m venv venv
                    . venv/bin/activate

                    echo "directory:"
                    python3 --version

                    # Upgrade pip and install requirements in the virtual environment
                    ./venv/bin/pip3 install --upgrade pip
                    ./venv/bin/pip3 install -r requirements.txt

                    # Display information about the Python environment
                    echo "Python version:"
                    ./venv/bin/python3 --version
                    echo "Pip version:"
                    ./venv/bin/pip3 --version
                    echo "Installed packages:"
                    pip3 list
            
    

                    # Run the tests
                    ./venv/bin/python3 test_myflask.py

                    # Deactivate the virtual environment
                    deactivate
                    '''
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    sh 'sudo docker-compose up -d'
                }
            }
        }
    }

    post {
        /*always {
            //sh 'sudo docker-compose down'
           
            
        }*/
        success {
            sh '''
                echo 'Application deployed successfully and is running'
            '''
        }
        failure {
            sh '''
                echo 'Deployment failed'
                sudo docker-compose down
            '''
        }
    }
}


=== my-project/Dockerfile ===

# Use the latest Python image as the base
FROM python:3.9-slim

# Set the working directory inside the container
WORKDIR /app

# Install SQLite
RUN apt-get update && apt-get install -y sqlite3

# Copy the requirements.txt file into the container
COPY requirements.txt requirements.txt

# Install the Python dependencies specified in requirements.txt
RUN pip3 install -r requirements.txt

# Copy the rest of the application code into the container
COPY . .

EXPOSE 5000

# Define the command to run the Flask application
CMD ["python3", "my_flask.py"]



=== my-project/docker-compose.yml ===

version: '3.8'

services:
  flask-app:
    build: .
    container_name: FlaskAPP
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
    volumes:
      - .:/app
      - ./data:/app/data 


=== my-project/test_myflask.py ===


import unittest
from my_flask import app, create_table, create_chat_table
import os

class FlaskTestCase(unittest.TestCase):

    def setUp(self):
        app.config['TESTING'] = True
        app.config['WTF_CSRF_ENABLED'] = False
        self.app = app.test_client()
        
        # Use an in-memory database for testing
        app.config['DATABASE'] = ':memory:'
        with app.app_context():
            create_table()
            create_chat_table()

    def test_index(self):
        response = self.app.get('/', follow_redirects=True)
        self.assertEqual(response.status_code, 200)
        self.assertIn(b'Welcome to the Flask App', response.data)

    def test_login(self):
        response = self.app.post('/login', data=dict(
            username='testuser',
            password='testpass'
        ), follow_redirects=True)
        self.assertIn(b'Invalid username or password', response.data)

    def test_insert_user(self):
        response = self.app.post('/insert', data=dict(
            id='1',
            username='newuser',
            password='newpass',
            classification='A',
            age='25',
            email='new@example.com'
        ), follow_redirects=True)
        self.assertEqual(response.status_code, 200)

if __name__ == '__main__':
    unittest.main()