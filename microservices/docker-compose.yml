version: '3.8'

services:
  # Auth Service Database
  auth-postgres:
    image: postgres:16-alpine
    container_name: auth-postgres
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: auth_pass
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_user -d auth_db"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - microservices-network
    restart: unless-stopped

  # Shared Redis (for all services)
  redis:
    image: redis:7-alpine
    container_name: microservices-redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - microservices-network
    restart: unless-stopped

  # Auth Service
  auth-service:
    build: ./auth-service
    container_name: auth-service
    ports:
      - "3001:3001"
    environment:
      - AUTH_DB_URL=postgresql://auth_user:auth_pass@auth-postgres:5432/auth_db
      - REDIS_URL=redis://redis:6379/1
      - JWT_SECRET=jwt-auth-secret-change-in-prod
      - SECRET_KEY=auth-service-secret-change-in-prod
    depends_on:
      auth-postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Management Interface
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: microservices-redis-commander
    hostname: redis-commander
    ports:
      - "8082:8081"
    environment:
      - REDIS_HOSTS=microservices:redis:6379
    networks:
      - microservices-network
    restart: unless-stopped
    depends_on:
      - redis

volumes:
  auth_postgres_data:
  redis_data:

networks:
  microservices-network:
    driver: bridge