version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16.10-alpine3.22
    container_name: chatapp-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-chatapp_db}
      POSTGRES_USER: ${DB_USER:-chatapp_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-chatapp_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-chatapp_user} -d ${DB_NAME:-chatapp_db}"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - chatapp-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: chatapp-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - chatapp-network
    restart: unless-stopped

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: chatapp-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-admin123}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - chatapp-network
    restart: unless-stopped

  # Flask Application
  web:
    build: .
    container_name: chatapp-web
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://${DB_USER:-chatapp_user}:${DB_PASSWORD:-chatapp_password}@postgres:5432/${DB_NAME:-chatapp_db}
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASSWORD:-admin123}@rabbitmq:5672/
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - chatapp-network
    restart: unless-stopped

  # Redis Commander - Redis Management Interface
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: chatapp-redis-commander
    hostname: redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    networks:
      - chatapp-network
    restart: unless-stopped
    depends_on:
      - redis

volumes:
  postgres_data: 
  redis_data: 
  rabbitmq_data: 

networks:
  chatapp-network:
    driver: bridge